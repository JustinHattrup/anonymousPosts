{"version":3,"sources":["components/NewPost.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["ADD_POST","gql","_templateObject","NewPost","props","_useMutation","useMutation","addPost","Object","slicedToArray","_title","objectSpread","title","useState","state","_title$title","setTitle","_description","description","_description$descript","setDescription","_submit","submit","_submit$submit","setSubmit","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","wrap","_context","prev","next","preventDefault","variables","sent","t0","stop","_x","apply","this","arguments","react_default","createElement","className","onSubmit","autoComplete","type","name","id","placeholder","value","onChange","target","DELETE_POST","Post_templateObject","GET_POSTS","_templateObject2","Posts","_useState","_useState2","_useState3","_useState4","_useState5","_useState6","deletePost","getPosts","useQuery","loading","error","refetch","handleCLick","components_NewPost","data","posts","map","post","index","key","date","onClick","client","ApolloClient","uri","App","react_common_esm","Post","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6d0b04d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { gql } from 'apollo-boost';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst ADD_POST = gql`\r\n  mutation AddPost($title: String!, $description: String!) {\r\n    addPost(title: $title, description: $description) {\r\n      id\r\n      title\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nfunction NewPost(props) {\r\n  const [addPost] = useMutation(ADD_POST);\r\n\r\n  const {\r\n    title: [title, setTitle]\r\n  } = {\r\n    title: useState(''),\r\n    ...(props.state || {})\r\n  };\r\n\r\n  const {\r\n    description: [description, setDescription]\r\n  } = {\r\n    description: useState(''),\r\n    ...(props.state || {})\r\n  };\r\n\r\n  const {\r\n    submit: [submit, setSubmit]\r\n  } = {\r\n    submit: useState(false),\r\n    ...(props.state || {})\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const test = await addPost({ variables: { title, description } });\r\n      setSubmit(true);\r\n      setTitle('');\r\n      setDescription('');\r\n    } catch (e) {\r\n      //console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleTitle = event => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleDescription = event => {\r\n    setDescription(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='NewPost'>\r\n      <h2>Add something</h2>\r\n\r\n      <p>{title}</p>\r\n      <br />\r\n      <p>{description}</p>\r\n      <form onSubmit={handleSubmit} autoComplete='off'>\r\n        Title: <br />\r\n        <input\r\n          type='text'\r\n          name='title'\r\n          id='title'\r\n          placeholder='Enter a title'\r\n          value={title}\r\n          onChange={handleTitle}\r\n        />\r\n        <br />\r\n        Description: <br />\r\n        <textarea\r\n          type='text'\r\n          name='description'\r\n          id='description'\r\n          placeholder='Enter a description'\r\n          value={description}\r\n          onChange={handleDescription}\r\n        />\r\n        <br />\r\n        <br />\r\n        <input id='submit' type='submit' value='Submit' />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewPost;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\r\n\r\nimport NewPost from './NewPost';\r\n\r\nconst DELETE_POST = gql`\r\n  mutation DeletePost($id: String!) {\r\n    deletePost(id: $id) {\r\n      id\r\n      title\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_POSTS = gql`\r\n  query getposts {\r\n    posts {\r\n      id\r\n      title\r\n      description\r\n      date\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Posts(props) {\r\n  const [title, setTitle] = useState('');\r\n\r\n  const [description, setDescription] = useState('');\r\n\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const [deletePost] = useMutation(DELETE_POST);\r\n  const getPosts = useQuery(GET_POSTS);\r\n\r\n  if (getPosts.loading) return <p>Loading...</p>;\r\n  if (getPosts.error) return <p>Error :(</p>;\r\n\r\n  if (submit === true) {\r\n    //console.log(submit);\r\n    setSubmit(false);\r\n    getPosts.refetch();\r\n  }\r\n\r\n  const handleCLick = async id => {\r\n    try {\r\n      const del = await deletePost({ variables: { id } });\r\n      getPosts.refetch();\r\n    } catch (e) {}\r\n  };\r\n\r\n  return (\r\n    <div className='Posts'>\r\n      <NewPost\r\n        state={{\r\n          title: [title, setTitle],\r\n          description: [description, setDescription],\r\n          submit: [submit, setSubmit]\r\n        }}\r\n      />\r\n      <h1>List of posts:</h1>\r\n      {/* <button onClick={() => getPosts.refetch()}>refetch</button> */}\r\n      <ul>\r\n        {getPosts.data.posts.map((post, index) => (\r\n          <li key={index}>\r\n            {post.id} <br /> {post.title} <br /> {post.description} <br />{' '}\r\n            {post.date}\r\n            <br />\r\n            <button onClick={() => handleCLick(post.id)}>delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;\r\n","import React, { useState } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport './styles/App.css';\nimport Posts from './components/Post';\nimport NewPost from './components/NewPost';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n  //uri: 'https://48p1r2roz4.sse.codesandbox.io'\n});\n\n//console.log(payload);\n\nfunction App() {\n  //console.log(payload);\n\n  const [payload, setPayload] = useState(0);\n  const [submit, setSubmit] = useState(false);\n\n  //console.log(submit);\n\n  return (\n    <ApolloProvider client={client}>\n      <div className='App'>\n        <h1>Posts app</h1>\n        <Posts />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}